#!/usr/bin/env python3
"""
Installation script for Python Console App
This script clones the production version from GitHub and sets up the application.
Usage: curl -sSL https://raw.githubusercontent.com/DeyanShahov/python-console-auto-update/production/install.py | python
"""

import subprocess
import sys
import os
import shutil
import re
import glob
import stat
import time

GITHUB_REPO = "https://github.com/DeyanShahov/python-console-auto-update.git"
APP_DIR = "python-console-app"

def remove_readonly(func, path, _):
    """Clear the readonly bit and reattempt the removal on Windows."""
    try:
        os.chmod(path, stat.S_IWRITE)
        func(path)
    except Exception as e:
        print(f"Error removing {path}: {e}")

def run_command(command, cwd=None):
    """
    Execute a shell command and return the result.
    """
    try:
        result = subprocess.run(command, shell=True, capture_output=True, text=True, cwd=cwd)
        if result.returncode != 0:
            print(f"Error executing: {command}")
            print(f"Output: {result.stderr}")
            return False
        return True
    except Exception as e:
        print(f"Failed to execute command: {command}")
        print(f"Error: {e}")
        return False


def find_python_command():
    """
    Find available Python command on Windows/Linux/Mac systems.
    Returns the command to use for Python.
    """
    import shutil

    # Try different Python commands in order of preference
    python_commands = [
        'python3',          # Standard on Linux/Mac and some Windows
        'python',           # Could be Python 2 or 3, but usually 3 in modern systems
        'py -3',            # Windows launcher for Python 3
        'py',               # Windows launcher (may default to Python 3)
    ]

    for cmd in python_commands:
        try:
            # Test if command exists and can run Python
            result = subprocess.run([cmd.split()[0], '--version'],
                                  capture_output=True, text=True,
                                  timeout=5)
            if result.returncode == 0 and 'Python' in result.stdout:
                version_match = re.search(r'Python (\d+)\.(\d+)', result.stdout)
                if version_match:
                    major = int(version_match.group(1))
                    minor = int(version_match.group(2))
                    if major >= 3:  # Any Python 3 version should work
                        print(f"‚úÖ Found Python command: {cmd} (version {major}.{minor})")
                        return cmd
        except (subprocess.TimeoutExpired, FileNotFoundError):
            continue

    return None

def main():
    """
    Main installation process.
    """
    # Guard clause: Check if being run from inside the app directory
    if os.path.basename(os.getcwd()) == APP_DIR and os.path.exists('main.py'):
        print("‚ùå –ì—Ä–µ—à–∫–∞: –¢–æ–∑–∏ —Å–∫—Ä–∏–ø—Ç –µ —Å–∞–º–æ –∑–∞ –∏–Ω—Å—Ç–∞–ª–∞—Ü–∏—è.")
        print("–ò–∑–≥–ª–µ–∂–¥–∞, —á–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ—Ç–æ –≤–µ—á–µ –µ –∏–Ω—Å—Ç–∞–ª–∏—Ä–∞–Ω–æ —Ç—É–∫.")
        print("\nüöÄ –ó–∞ –¥–∞ —Å—Ç–∞—Ä—Ç–∏—Ä–∞—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ—Ç–æ, –∏–∑–ø–æ–ª–∑–≤–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥–∞—Ç–∞:")
        print("   python main.py")
        sys.exit(1)

    print("üîÑ –ò–Ω—Å—Ç–∞–ª–∏—Ä–∞–Ω–µ –Ω–∞ –∫–æ–Ω–∑–æ–ª–Ω–æ—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ...")
    print("üì• –ò–∑—Ç–µ–≥–ª—è–Ω–µ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∞—Ç–∞ –≤–µ—Ä—Å–∏—è –æ—Ç GitHub...")

    # Step 1: Clone the production branch
    if os.path.exists(APP_DIR):
        print(f"‚ö†Ô∏è  –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ç–∞ '{APP_DIR}' –≤–µ—á–µ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞. –ü—Ä–µ–º–∞—Ö–≤–∞–Ω–µ –Ω–∞ —Å—Ç–∞—Ä–∞—Ç–∞ –∏–Ω—Å—Ç–∞–ª–∞—Ü–∏—è...")
        shutil.rmtree(APP_DIR, onerror=remove_readonly)
        time.sleep(1) # Give OS time to release file handles

    clone_cmd = f"git clone --branch production --single-branch {GITHUB_REPO} {APP_DIR}"
    if not run_command(clone_cmd):
        print("‚ùå Failed to clone repository from GitHub")
        sys.exit(1)

    print("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ—Ç–æ –µ –∏–∑—Ç–µ–≥–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")

    # Step 2: Change to app directory and check Python version
    try:
        os.chdir(APP_DIR)
    except FileNotFoundError:
        print(f"‚ùå –ì—Ä–µ—à–∫–∞: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ç–∞ '{APP_DIR}' –Ω–µ –±–µ—à–µ —Å—ä–∑–¥–∞–¥–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä–µ—Ç–µ –ø—Ä–∞–≤–∞—Ç–∞ –∑–∞ –¥–æ—Å—Ç—ä–ø.")
        sys.exit(1)


    print("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞—Ç–∞ –Ω–∞ Python –≤–µ—Ä—Å–∏—è—Ç–∞ –µ —É—Å–ø–µ—à–Ω–∞")

    # Step 3: Clean up development files (not needed for consumers)
    development_files = [
        '.git',
        '.gitignore',
        'install.py', # Remove install script after use
        '__pycache__',
        'README.md',
        '*.pyc',
        '*.pyo',
        '.vscode',
        '.idea',
        '*.log',
    ]

    files_removed = []
    print("üßπ –ó–∞–ø–æ—á–≤–∞ –ø–æ—á–∏—Å—Ç–≤–∞–Ω–µ –Ω–∞ –Ω–µ–Ω—É–∂–Ω–∏ —Ñ–∞–π–ª–æ–≤–µ...")
    for pattern in development_files:
        # Handle wildcard patterns
        if '*' in pattern:
            matches = glob.glob(pattern)
            for match in matches:
                if os.path.exists(match):
                    try:
                        if os.path.isfile(match):
                            os.remove(match)
                        elif os.path.isdir(match):
                            shutil.rmtree(match, onerror=remove_readonly)
                        files_removed.append(match)
                    except Exception as e:
                        print(f"‚ö†Ô∏è –ù–µ –º–æ–∂–µ –¥–∞ –ø—Ä–µ–º–∞—Ö–Ω–µ '{match}': {e}")
        else: # Handle specific files/directories
            if os.path.exists(pattern):
                try:
                    if os.path.isfile(pattern):
                        os.remove(pattern)
                    elif os.path.isdir(pattern):
                        shutil.rmtree(pattern, onerror=remove_readonly)
                    files_removed.append(pattern)
                except Exception as e:
                    print(f"‚ö†Ô∏è –ù–µ –º–æ–∂–µ –¥–∞ –ø—Ä–µ–º–∞—Ö–Ω–µ '{pattern}': {e}")

    if files_removed:
        print(f"üßπ –ü–æ—á–∏—Å—Ç–≤–∞–Ω–µ –∑–∞–≤—ä—Ä—à–µ–Ω–æ: –ø—Ä–µ–º–∞—Ö–Ω–∞—Ç–∏ {len(files_removed)} –µ–ª–µ–º–µ–Ω—Ç–∞.")
    else:
        print("üßπ –ù—è–º–∞ –Ω–µ–Ω—É–∂–Ω–∏ —Ñ–∞–π–ª–æ–≤–µ –∑–∞ –ø–æ—á–∏—Å—Ç–≤–∞–Ω–µ.")

    # Step 4: Make main.py executable on Unix systems
    if not os.name == 'nt':  # Not Windows
        try:
            os.chmod('main.py', 0o755)
        except OSError:
            pass  # Continue if chmod fails

    print("\nüéâ –ò–Ω—Å—Ç–∞–ª–∞—Ü–∏—è—Ç–∞ –µ –∑–∞–≤—ä—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    print(f"üìÇ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ—Ç–æ –µ –∏–Ω—Å—Ç–∞–ª–∏—Ä–∞–Ω–æ –≤: {os.getcwd()}")
    print("\nüöÄ –ó–∞ –¥–∞ —Å—Ç–∞—Ä—Ç–∏—Ä–∞—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ—Ç–æ, –∏–∑–ø–æ–ª–∑–≤–∞–π—Ç–µ:")
    print("   python main.py")

    # Step 5: Ask if user wants to run the app now
    try:
        choice = input("\n‚ùì –ñ–µ–ª–∞–µ—Ç–µ –ª–∏ –¥–∞ —Å—Ç–∞—Ä—Ç–∏—Ä–∞—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ—Ç–æ —Å–µ–≥–∞? (y/n): ").strip().lower()
        if choice == 'y':
            print("\nüèÉ –°—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ –Ω–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ—Ç–æ...\n")
            print("-" * 40)
            subprocess.run([sys.executable, 'main.py'])
        else:
            print("\n‚úÖ –ò–Ω—Å—Ç–∞–ª–∞—Ü–∏—è—Ç–∞ –µ –∑–∞–≤—ä—Ä—à–µ–Ω–∞. –ú–æ–∂–µ—Ç–µ –¥–∞ —Å—Ç–∞—Ä—Ç–∏—Ä–∞—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ—Ç–æ –ø–æ-–∫—ä—Å–Ω–æ —Å:")
            print(f"   cd {os.path.basename(os.getcwd())}")
            print("   python main.py")
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è  –ò–Ω—Å—Ç–∞–ª–∞—Ü–∏—è—Ç–∞ –µ –ø—Ä–µ–∫—Ä–∞—Ç–µ–Ω–∞ –æ—Ç –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è.")
        print("–ú–æ–∂–µ—Ç–µ –¥–∞ —Å—Ç–∞—Ä—Ç–∏—Ä–∞—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ—Ç–æ –ø–æ-–∫—ä—Å–Ω–æ.")

if __name__ == "__main__":
    main()
