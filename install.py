#!/usr/bin/env python3
"""
Installation script for Python Console App
This script clones the production version from GitHub and sets up the application.
Usage: curl -sSL https://raw.githubusercontent.com/DeyanShahov/python-console-auto-update/production/install.py | python
"""

import subprocess
import sys
import os
import shutil
import re
import glob
import stat
import time

GITHUB_REPO = "https://github.com/DeyanShahov/python-console-auto-update.git"
APP_DIR = "python-console-app" # Default directory name for the installed app

def remove_readonly(func, path, _):
    """Clear the readonly bit and reattempt the removal on Windows."""
    try:
        os.chmod(path, stat.S_IWRITE)
        func(path)
    except Exception as e:
        print(f"Error removing {path}: {e}")

def run_command(command, cwd=None):
    """
    Execute a shell command and return the result.
    """
    try:
        result = subprocess.run(command, shell=True, capture_output=True, text=True, cwd=cwd)
        if result.returncode != 0:
            print(f"Error executing: {command}")
            print(f"Output: {result.stderr}")
            return False
        return True
    except Exception as e:
        print(f"Failed to execute command: {command}")
        print(f"Error: {e}")
        return False

def main():
    """
    Main installation process.
    """
    # Determine the directory where the app will be installed
    install_target_dir = os.path.join(os.getcwd(), APP_DIR)

    # Guard clause: Check if being run from inside the app directory
    if os.path.exists(os.path.join(os.getcwd(), 'main.py')) and os.path.exists(os.path.join(os.getcwd(), 'updater.py')):
        print("‚ùå –ì—Ä–µ—à–∫–∞: –¢–æ–∑–∏ —Å–∫—Ä–∏–ø—Ç –µ —Å–∞–º–æ –∑–∞ –∏–Ω—Å—Ç–∞–ª–∞—Ü–∏—è.")
        print("–ò–∑–≥–ª–µ–∂–¥–∞, —á–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ—Ç–æ –≤–µ—á–µ –µ –∏–Ω—Å—Ç–∞–ª–∏—Ä–∞–Ω–æ —Ç—É–∫.")
        print("\nüöÄ –ó–∞ –¥–∞ —Å—Ç–∞—Ä—Ç–∏—Ä–∞—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ—Ç–æ, –∏–∑–ø–æ–ª–∑–≤–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥–∞—Ç–∞:")
        print("   python main.py")
        sys.exit(1)

    print("üîÑ –ò–Ω—Å—Ç–∞–ª–∏—Ä–∞–Ω–µ –Ω–∞ –∫–æ–Ω–∑–æ–ª–Ω–æ—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ...")
    print("üì• –ò–∑—Ç–µ–≥–ª—è–Ω–µ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∞—Ç–∞ –≤–µ—Ä—Å–∏—è –æ—Ç GitHub...")

    # Step 1: Clone the production branch
    if os.path.exists(install_target_dir):
        print(f"‚ö†Ô∏è  –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ç–∞ '{install_target_dir}' –≤–µ—á–µ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞. –ü—Ä–µ–º–∞—Ö–≤–∞–Ω–µ –Ω–∞ —Å—Ç–∞—Ä–∞—Ç–∞ –∏–Ω—Å—Ç–∞–ª–∞—Ü–∏—è...")
        shutil.rmtree(install_target_dir, onerror=remove_readonly)
        time.sleep(1) # Give OS time to release file handles

    clone_cmd = f"git clone --branch production --single-branch {GITHUB_REPO} {APP_DIR}"
    if not run_command(clone_cmd):
        print("‚ùå Failed to clone repository from GitHub")
        sys.exit(1)

    print("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ—Ç–æ –µ –∏–∑—Ç–µ–≥–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")

    # Step 2: Perform cleanup *before* changing directory
    # This ensures install.py is not trying to delete files it's running from
    print(f"üßπ –ó–∞–ø–æ—á–≤–∞ –ø–æ—á–∏—Å—Ç–≤–∞–Ω–µ –Ω–∞ –Ω–µ–Ω—É–∂–Ω–∏ —Ñ–∞–π–ª–æ–≤–µ –≤ '{install_target_dir}'...")
    development_files = [
        '.git',
        '.gitignore',
        'install.py', # This install.py is the one *inside* the cloned repo, which should be removed
        'install.ps1', # This install.ps1 is also for installation, not needed after install
        '__pycache__',
        'README.md',
        'AUTO_UPDATE_WORKFLOW.md', # Development documentation, not needed for end users
        '.clinerules', # Development rules folder, not needed for end users
        '*.pyc',
        '*.pyo',
        '.vscode',
        '.idea',
        '*.log',
    ]

    files_removed = []
    for pattern in development_files:
        full_pattern_path = os.path.join(install_target_dir, pattern)
        if '*' in pattern:  # Handle wildcard patterns
            matches = glob.glob(full_pattern_path)
            for match in matches:
                if os.path.exists(match):
                    try:
                        if os.path.isfile(match):
                            os.remove(match)
                        elif os.path.isdir(match):
                            shutil.rmtree(match, onerror=remove_readonly)
                        files_removed.append(match)
                    except Exception as e:
                        print(f"‚ö†Ô∏è –ù–µ –º–æ–∂–µ –¥–∞ –ø—Ä–µ–º–∞—Ö–Ω–µ '{match}': {e}")
        else: # Handle specific files/directories
            if os.path.exists(full_pattern_path):
                try:
                    if os.path.isfile(full_pattern_path):
                        os.remove(full_pattern_path)
                    elif os.path.isdir(full_pattern_path):
                        shutil.rmtree(full_pattern_path, onerror=remove_readonly)
                    files_removed.append(full_pattern_path)
                except Exception as e:
                    print(f"‚ö†Ô∏è –ù–µ –º–æ–∂–µ –¥–∞ –ø—Ä–µ–º–∞—Ö–Ω–µ '{full_pattern_path}': {e}")

    if files_removed:
        print(f"üßπ –ü–æ—á–∏—Å—Ç–≤–∞–Ω–µ –∑–∞–≤—ä—Ä—à–µ–Ω–æ: –ø—Ä–µ–º–∞—Ö–Ω–∞—Ç–∏ {len(files_removed)} –µ–ª–µ–º–µ–Ω—Ç–∞.")
    else:
        print("üßπ –ù—è–º–∞ –Ω–µ–Ω—É–∂–Ω–∏ —Ñ–∞–π–ª–æ–≤–µ –∑–∞ –ø–æ—á–∏—Å—Ç–≤–∞–Ω–µ.")

    # Step 3: Change to app directory and check Python version
    try:
        os.chdir(install_target_dir)
    except FileNotFoundError:
        print(f"‚ùå –ì—Ä–µ—à–∫–∞: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ç–∞ '{install_target_dir}' –Ω–µ –±–µ—à–µ —Å—ä–∑–¥–∞–¥–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä–µ—Ç–µ –ø—Ä–∞–≤–∞—Ç–∞ –∑–∞ –¥–æ—Å—Ç—ä–ø.")
        sys.exit(1)

    # Check Python version
    if sys.version_info < (3, 6):
        print("‚ùå Python 3.6 –∏–ª–∏ –ø–æ-–Ω–æ–≤–∞ –≤–µ—Ä—Å–∏—è –µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞.")
        sys.exit(1)
    print("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞—Ç–∞ –Ω–∞ Python –≤–µ—Ä—Å–∏—è—Ç–∞ –µ —É—Å–ø–µ—à–Ω–∞")

    # Step 4: Make main.py executable on Unix systems
    if not os.name == 'nt':  # Not Windows
        try:
            os.chmod('main.py', 0o755)
        except OSError:
            pass  # Continue if chmod fails

    print("\nüéâ –ò–Ω—Å—Ç–∞–ª–∞—Ü–∏—è—Ç–∞ –µ –∑–∞–≤—ä—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    print(f"üìÇ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ—Ç–æ –µ –∏–Ω—Å—Ç–∞–ª–∏—Ä–∞–Ω–æ –≤: {os.getcwd()}")
    # Step 5: Create start.bat for Windows users
    if os.name == 'nt': # Only for Windows
        start_bat_content = """@echo off
echo Starting Python Console App...
python main.py
pause"""
        start_bat_path = os.path.join(os.getcwd(), "start.bat")
        try:
            with open(start_bat_path, 'w', encoding='utf-8') as f:
                f.write(start_bat_content)
            print("‚úÖ –°—ä–∑–¥–∞–¥–µ–Ω 'start.bat' —Ñ–∞–π–ª –∑–∞ –ª–µ—Å–Ω–æ —Å—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ.")
        except Exception as e:
            print(f"‚ö†Ô∏è –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ —Å—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ 'start.bat': {e}")

    print("\nüéâ –ò–Ω—Å—Ç–∞–ª–∞—Ü–∏—è—Ç–∞ –µ –∑–∞–≤—ä—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    print(f"üìÇ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ—Ç–æ –µ –∏–Ω—Å—Ç–∞–ª–∏—Ä–∞–Ω–æ –≤: {os.getcwd()}")
    print("\nüöÄ –ó–∞ –¥–∞ —Å—Ç–∞—Ä—Ç–∏—Ä–∞—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ—Ç–æ:")
    if os.name == 'nt':
        print("   –ö–ª–∏–∫–Ω–µ—Ç–µ –¥–≤–∞ –ø—ä—Ç–∏ –Ω–∞ 'start.bat' —Ñ–∞–π–ª–∞")
        print("   –ò–ª–∏ –∏–∑–ø—ä–ª–Ω–µ—Ç–µ: start.bat")
    else:
        print("   python main.py")

    # Step 6: Ask if user wants to run the app now
    try:
        choice = input("\n‚ùì –ñ–µ–ª–∞–µ—Ç–µ –ª–∏ –¥–∞ —Å—Ç–∞—Ä—Ç–∏—Ä–∞—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ—Ç–æ —Å–µ–≥–∞? (y/n): ").strip().lower()
        if choice == 'y':
            print("\nüèÉ –°—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ –Ω–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ—Ç–æ...\n")
            print("-" * 40)
            if os.name == 'nt':
                subprocess.run(['start.bat'], shell=True)
            else:
                subprocess.run([sys.executable, 'main.py'])
        else:
            print("\n‚úÖ –ò–Ω—Å—Ç–∞–ª–∞—Ü–∏—è—Ç–∞ –µ –∑–∞–≤—ä—Ä—à–µ–Ω–∞. –ú–æ–∂–µ—Ç–µ –¥–∞ —Å—Ç–∞—Ä—Ç–∏—Ä–∞—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ—Ç–æ –ø–æ-–∫—ä—Å–Ω–æ.")
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è  –ò–Ω—Å—Ç–∞–ª–∞—Ü–∏—è—Ç–∞ –µ –ø—Ä–µ–∫—Ä–∞—Ç–µ–Ω–∞ –æ—Ç –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è.")
        print("–ú–æ–∂–µ—Ç–µ –¥–∞ —Å—Ç–∞—Ä—Ç–∏—Ä–∞—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ—Ç–æ –ø–æ-–∫—ä—Å–Ω–æ.")

if __name__ == "__main__":
    main()
